3. Click on the Create Group blue button for creating a new IAM group:
 In the User group name field, enter DevOps as the name of the group:
 5. Skip down to the Attach permissions policies section, enter AmazonEC2ReadOnlyAccess into the search bar and select the resulting policy: AmazonEC2ReadOnlyAccess:
 6. Click Create Group. 

The Groups page now lists the new group and you are able to assign the DevOps group to any available user:

Creating an IAM User:
========================
2. Click Add users to begin creating a new user:

alt

Note: You can create up to 10 users at a time with usernames that don't exceed 64 characters.

 

3. Enter the following values in the form:

User name: John (Name must be case sensitive)
Access key - Programmatic access: Checked
Password - AWS Management Console access: Checked
Console password: Autogenerated password
Require password reset: Unchecked

4. Click Next: Permissions to advance to the next step.

 

5. Click Next: Tags. Skip this page and click on Next: Review.

You will add the user to the DevOps Group later.

 

6. Click Create User.

 

7. Click Download .csv for downloading a CSV file containing the security credentials and then click Close:

You will now add John to the DevOps Group.

 

9. Click User groups > DevOps to open the DevOps group details view:

10. Click Add Users.

 

11. Check John and click Add Users:

alt

Observe that John is now in the DevOps group:

Creating a Customer Managed Policy with Policy Generator:
========================================================
1. On the Identity & Access Management dashboard, click Policies on the left:

alt

 

2. Click Create Policy:

alt

 

3. Select S3 for the Service and ListAllMyBuckets for the Action:

4.  Click Next: Tags, and click Next: Review and in Policy Name field insert policy-lab:

alt

 

5. Choose Create Policy to save your new policy.

Attaching a Policy to Users:
=============================
1. On the Identity & Access Management dashboard, click Policies on the left:

alt

 

2. Type AmazonS3ReadOnlyAccess into the search box then select the only available policy:

3. Click Actions and then choose Attach:
Select the Jeff User to attach the policy:

Creating an IAM Role:
======================
You have the ability to create IAM Roles using the AWS Management Console. An IAM role is an IAM entity that has specific permissions. An IAM role is similar to an IAM user in that you can manage its access to AWS resources using policies. IAM roles are attachable to other IAM services like AWS EC2 and AWS Lambda, to manage resource access for those services. In this Lab Step, you will practice creating an IAM role.

1. From the Identity & Access Management dashboard, click Roles:

alt

 

2. Click Create role:

alt

 

3. On the Create Role page, select AWS service under Trusted entity type and EC2 under Choose a use case, then click Next:

4. On the Attach permissions page, filter for the name S3Full and select the policy AmazonS3FullAccess:
5. Click Next.

 

6. Set the Role name to lab-role:
7. Click Create Role:

alt

 

8. Click on the role you created to inspect its details:

Launching EC2 Instances with IAM Profile:
==========================================
In AWS, you can designate an IAM role to attach to an EC2 instance when launching the instance, or any time after. Attaching an IAM role to an instance allows you to manage permissions for instances centrally with IAM. In this Lab Step, you'll practice launching an EC2 instance with an IAM role attached.

Instructions
1. In the AWS Management Console search bar, enter EC2, and click the EC2 result under Services:

alt

 

2. From the EC2 dashboard, click Launch Instances:

alt

 

 3. Select the Amazon Linux 2 AMI at the top of the list: 
 4. On the Choose an Instance Type page select the t2.micro, and click on Next: Configure Instance Details:
 5. On the Configure Instance Details tab, select lab-role for the IAM Role and then click Review and Launch:
 6. On the Review Instance Launch page, click Launch:
 7. In the Select an existing key pair or create a new key pair dialog box, select Choose an existing key pair, then choose the 477678071893 keypair:
 8. Select the acknowledgment checkbox and then click Launch Instances:

 

 

9. Click View Instances to return to the EC2 dashboard:

Connecting to the Amazon Virtual Machine Using EC2 Instance Connect:
=====================================================================
In this lab, you will use an EC2 instance to test IAM access from the command-line.

In this lab step, you will connect to an EC2 instance using EC2 Instance Connect and access a shell.
1. Navigate to EC2 Instances by clicking here:

The instances list page will open:

alt

If you don't see a running instance then the lab environment is still loading. Wait until the Instance state is Running.

 

2. Right-click the instance you created, and click Connect:

alt

The Connect to your instance form will load.

 

3. In the form, ensure the EC2 Instance Connect tab is selected:

alt

You will see the instance's Instance ID and Public IP address displayed.

 

4. In the User name textbox, enter :

alt

 

5. To open a browser-based shell, click Connect:

alt

If you see an error it's likely that the environment hasn't finished setting up. Check for Setup completed at the top-left corner of the lab and try connecting again:

alt

A browser-based shell will open in a new window ready for you to use.

Keep this window open, you will use it in later lab steps.

You can also connect to the instance using your preferred SSH client and the PPK (Windows) or PEM (Mac/Linux) key files in the Credentials section of this lab.

Testing IAM from an EC2 Linux Instance:
=======================================
Instead of creating and distributing your AWS credentials, you can use IAM roles to delegate permission for making API requests. In this Lab Step, you will practice using IAM instance profiles to manage permissions in an EC2 instance as well as using an IAM user's credentials to do the same.

1. Use the following command to verify your EC2 instance has the correct instance profile:

curl http://169.254.169.254/latest/meta-data/iam/info

The command should return a JSON object with an InstanceProfileArn value ending in lab-role. If it does, you have launched your EC2 instance with the correct instance profile.

2. Run the following commands to test that you can create and S3 buckets, making sure to replace "randomnumber" with a random number:
aws s3 mb s3://ca-labs-student-test-bucket-randomnumber(ex: ca-labs-student-test-bucket-56)
aws s3 ls

So far you used the IAM instance profile attached to the instance to perform these actions. Now, you will call the AWS API by specifying the Access Key and Secret Key of the user, John, in the command line.

 3. Navigate to the IAM dashboard and click Users:

alt

 

4. Click John.

The user John has a different set of permissions than Jeff. John is not authorized to create an S3 bucket. You will try to create an S3 bucket with user John. This will allow you to understand what happens when an action is attempted by a user who doesn't have the correct permissions. 
 5. Open the CSV file you downloaded in a previous lab step containing the Access Key and Secret Access Key for the user John.

 

6. In your SSH session enter these commands:

export AWS_ACCESS_KEY_ID=AKIAW6N6U6BKQRVRN2NK
export AWS_SECRET_ACCESS_KEY=S39nKZPBCcUv50XD3PDVUayygtvVV320hQt2Ney/

This will configure the EC2 instance for the user, John. The EC2 instance will use the provided security credentials and override the instance profile set to the instance.

7. Run the following commands, making sure to replace the string "randomnumber" with a random number:

aws ec2 describe-instances --region us-west-2
aws s3 mb s3://ca-labs-student-test-bucket-57

Notice that while you can list EC2 instances now due to the permissions set for John, you no longer have the ability to create S3 buckets because the instance profile has been overridden.

n this Lab Step, you learned the difference between using IAM instance profiles and IAM user security credentials to manage permissions for an EC2 instance.


